import plotly.express as px
import pandas as pd
import pickle
import torch
import os
import re
from pykan.kan import KAN

# Load data artifacts
with open("models/feature_config.pkl", "rb") as f:
    feature_config = pickle.load(f)
with open("models/original_df.pkl", "rb") as f:
    original_df = pickle.load(f)

# Extract feature names
feature_names = feature_config["continuous_labels"] + feature_config["binary_labels"] + feature_config["ordinal_labels"]

# Load model and feature scores
model = KAN(width=[53, 1, 2], grid=5, k=3, seed=42)
checkpoint = torch.load('model_with_scores.pt')
model.load_state_dict(checkpoint['model_state_dict'])
feature_scores = checkpoint['feature_scores'].cpu().tolist()  # Convert tensor to list
model.eval()

# Sort image list to align with feature order
def extract_input_number(filename):
    match = re.search(r'input(\d+)', filename)
    return int(match.group(1)) if match else -1

images_list = sorted(
    [f for f in os.listdir('assets/images/') if f.lower().endswith('.png')],
    key=extract_input_number
)

# Combine everything into DataFrame
importance_df = pd.DataFrame({
    'Feature': feature_names,
    'Score': feature_scores,
    'Image': ['assets/images/' + img for img in images_list]
})

# Plotly figure
fig = px.bar(
    importance_df.sort_values(by="Score", ascending=False),
    x='Score',
    y='Feature',
    orientation='h',
    title='Belangrijkheiden (Hoog naar laag)',
    labels={'Score': 'Belangrijkheid Score'}
)
fig.update_layout(clickmode='event+select', yaxis={'categoryorder': 'total ascending'})

# Create JS mapping from DataFrame
feature_to_image_js = ",\n      ".join(
    [f"'{row['Feature']}': '{row['Image']}'" for _, row in importance_df.iterrows()]
)

# HTML template with real mapping
html_template = f"""
<html>
<head>
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
</head>
<body>
  <div id="plot"></div>
  <div style="margin-top: 20px;">
    <img id="feature-image" src="" style="max-width: 600px; display: none;" />
  </div>

  <script>
    var data = {fig.to_json()};
    Plotly.newPlot('plot', data.data, data.layout);

    // Feature-to-image map (autogenerated from Python)
    var featureToImage = {{
      {feature_to_image_js}
    }};

    // On click, update image
    document.getElementById('plot').on('plotly_click', function(eventData) {{
      var feature = eventData.points[0].y;
      var imagePath = featureToImage[feature];

      var img = document.getElementById('feature-image');
      img.src = imagePath;
      img.style.display = 'block';
    }});
  </script>
</body>
</html>
"""

# Save to file
with open("feature_plot_with_images.html", "w", encoding="utf-8") as f:
    f.write(html_template)